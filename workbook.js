#!/usr/local/bin/node

var repl = require("repl");
jark = require( './jarkstats.js' );
List = jark.objects.List;
Table = jark.objects.Table;
Line = jark.objects.Line;
ar = [1,2,4,5,6,7,8,9,10];

Arraytest = function( /* unlimited arguments */) {
	var args = Array.prototype.slice.apply(arguments, [0]);
	for (var i=0; i < args.length; i++) {
		console.log( args[i].constructor );
		return [ Object.prototype.toString.apply(args[i]) === '[object Array]', args[i].constructor == [].constructor ];
	};
}

// data
data = {};
data.histograms1 = {};
data.histograms1.allsalaries = new List( [ 62  , 53  , 50  , 46.66666  , 46.5  , 40  , 30  , 23  , 22.5  , 20  , 17.5  , 15  , 14.5  , 13.30579  , 11  , 9  , 8.6  , 8.5  , 8  , 7.25  , 5  , 2  , 1.5  , 1.31125  , 1.2  , 1.19  , 1.19  , 1.09  , 1.09  , 50  , 38  , 30  , 25  , 22  , 21  , 16  , 8  , 7  , 5.5  , 5  , 4  , 3.3  , 3.05  , 3  , 3  , 2.5  , 2.5  , 2.5  , 2.25  , 2  , 2  , 2  , 1.75  , 1.6  , 1.5  , 1.175  , 1.12  , 1.09  , 1.09  , 65  , 65  , 23.33333  , 22.5  , 22.4  , 19  , 14.5  , 7.75  , 6.6  , 6.35  , 5  , 3.25  , 2.875  , 2.35  , 2.32875  , 2.3  , 2.25  , 1.85  , 1.65  , 1.65  , 1.33  , 1.15  , 1.145  , 1.125  , 1.09  , 1.09  , 55  , 48  , 47.91667  , 37.89456  , 35.25  , 33.375  , 30  , 25.5  , 23.79458  , 20  , 15.5  , 15.25  , 10  , 9.25  , 8.25  , 7.5  , 5.25  , 4.375  , 4.08333  , 4  , 4  , 3  , 1.9  , 1.55  , 1.45  , 1.09  , 92.375  , 51.5  , 20  , 6.7  , 6  , 5  , 5  , 3.25  , 2.75  , 2.75  , 2.25  , 2  , 1.85  , 1.85  , 1.79  , 1.7  , 1.7  , 1.7  , 1.7  , 1.5  , 1.5  , 1.275  , 1.09  , 1.09  , 1.09  , 55  , 53.5  , 45  , 37  , 29  , 26.725  , 23  , 18.5  , 17.5  , 14  , 12.75  , 12  , 6  , 6  , 5.7  , 4.5  , 4  , 4  , 3.15  , 3  , 2.4  , 2.25  , 2.025  , 2  , 1.6  , 1.4  , 1.17  , 1.09  , 50.5125  , 25  , 21  , 16  , 9.75  , 9  , 7.5  , 5.75  , 5  , 5  , 3.75  , 3.12  , 2.5  , 2.075  , 1.9  , 1.8  , 1.75  , 1.6  , 1.5  , 1.48  , 1.4  , 1.4  , 1.35  , 1.2  , 1.2  , 1.18  , 1.09  , 57.75  , 22  , 20  , 17  , 14.25  , 10.5  , 10.5  , 10  , 5.6  , 4  , 3.25  , 2.9  , 2.8  , 2.7  , 2  , 1.9  , 1.875  , 1.8  , 1.75  , 1.55  , 1.5  , 1.5  , 1.475  , 1.35  , 1.3  , 1.28  , 1.2  , 1.09  , 62  , 46.7  , 35  , 20  , 7.5  , 5.25  , 5  , 4.75  , 3.5  , 2.75  , 2.25  , 2.025  , 1.75  , 1.75  , 1.72  , 1.55  , 1.525  , 1.4  , 1.4  , 1.375  , 1.25  , 1.225  , 1.175  , 1.175  , 1.175  , 1.15  , 1.09  , 1.09  , 1.09  , 66  , 52.68506  , 43.19426  , 42.43901  , 40  , 35.83333  , 33.5  , 30  , 28.25  , 28  , 26  , 16.66666  , 7.5  , 7  , 5.4  , 5  , 3.2  , 3  , 2.85  , 2.5  , 2.3  , 1.9  , 1.5  , 1.4  , 1.15  , 71.5  , 59.75  , 53  , 45  , 40  , 27  , 19  , 18  , 15  , 15  , 11.5  , 11  , 8  , 7  , 3.5  , 2.3  , 1.75  , 1.6  , 1.5  , 1.45  , 1.35  , 1.35  , 1.3  , 1.3  , 1.25  , 70  , 42  , 18.5  , 11.5  , 9.55  , 5.95  , 5  , 4  , 3.18  , 2.9  , 1.95  , 1.8  , 1.55  , 1.5  , 1.45  , 1.45  , 1.3  , 1.25  , 1.2  , 1.18  , 1.17  , 1.17  , 1.15  , 1.135  , 1.12  , 1.09  , 75  , 60.25  , 55.66667  , 42.5  , 35  , 28.5  , 20.75  , 10  , 8.5  , 8  , 6  , 5.5  , 4.42334  , 4  , 3.75  , 3.5  , 3.5  , 3.25  , 2.5  , 2.35  , 1.75  , 1.45  , 1.4  , 1.2  , 1.175  , 1.15  , 1.15  , 71  , 56.57365  , 40  , 33  , 30  , 14.61649  , 14.19681  , 19.25  , 13.5  , 11  , 10.5  , 8.75  , 6  , 3.75  , 3.6  , 2.65  , 2.58333  , 2  , 2  , 1.8  , 1.78  , 1.675  , 1.65  , 1.6  , 1.5  , 1.3  , 1.185  , 1.16  , 65  , 62  , 55  , 52.5  , 48  , 47.5  , 42  , 35  , 15  , 14  , 7.5  , 5.75  , 5  , 4.6  , 3.5  , 3.15  , 2.9  , 1.425  , 1.375  , 1.35  , 1.25  , 1.115  , 1.115  , 1.09  , 1.09  , 1.09  , 47.5  , 41.5  , 36.75  , 34  , 34  , 16  , 15  , 14  , 12  , 8.25  , 8.225  , 5.5  , 5  , 5  , 4.5  , 3.85  , 2.53  , 2.3  , 2.25  , 2.1  , 1.6  , 1.6  , 1.5  , 1.275  , 1.13  , 1.09  , 1.09  , 61.5  , 56  , 49.75  , 43.33334  , 35.75  , 33  , 16  , 15  , 11  , 10  , 8.17  , 7.25  , 6.75  , 6.25  , 6  , 5  , 5  , 5  , 5  , 4.25  , 3.5  , 2  , 1.95  , 1.95  , 1.6  , 1.35  , 1.3  , 1.25  , 1.2  , 1.09  , 56.12991  , 46.08333  , 45  , 43.75  , 32.66666  , 30  , 25  , 15  , 11.4  , 10.5  , 10  , 10  , 6.5  , 4.925  , 4.5  , 4.25  , 3.15  , 2.8  , 2.7  , 1.815  , 1.67  , 1.55  , 1.5  , 1.45  , 1.35  , 1.3  , 1.275  , 1.2  , 1.12  , 61  , 35.5  , 33  , 30  , 27  , 18  , 16  , 15  , 12  , 7.5  , 6.25  , 5  , 4.125  , 4  , 3.5  , 3.4  , 2.925  , 2.5  , 2.3  , 2.25  , 2.2  , 1.875  , 1.65  , 1.34  , 1.3  , 1.18  , 50.5  , 48.75  , 44.5  , 26  , 20  , 15.5  , 9.95  , 7.5  , 7.5  , 3.3  , 3.25  , 3  , 3  , 2.8  , 2.75  , 2.75  , 2.35  , 2.2  , 2.1  , 2.05  , 1.96  , 1.8  , 1.65  , 1.6  , 1.09  , 1.09  , 48  , 40  , 31.5  , 30  , 30  , 27  , 26  , 23  , 20  , 11  , 9.5  , 8.7  , 6  , 6  , 4.25  , 4  , 3.75  , 3  , 1.95  , 1.75  , 1.75  , 1.7  , 1.36  , 1.35  , 1.34  , 1.24  , 1.24  , 1.09  , 30  , 28  , 20.25  , 15.5  , 11.25  , 9.5  , 7  , 3.15  , 3.15  , 3  , 2.1  , 2  , 1.9  , 1.7  , 1.65  , 1.65  , 1.6  , 1.56  , 1.5  , 1.35  , 1.35  , 1.325  , 1.21  , 1.21  , 1.2  , 35  , 27.875  , 27  , 25  , 22  , 19.6  , 18.375  , 9  , 7.5  , 7.25  , 4.05  , 3.375  , 3.25  , 2.25  , 2.15  , 2  , 1.98  , 1.95  , 1.8  , 1.78  , 1.69  , 1.55  , 1.25  , 1.23  , 1.23  , 1.16  , 1.09  , 1.09  , 1.09  , 62  , 55  , 52.5  , 25  , 17.5  , 12  , 11  , 8  , 6  , 3.5  , 3.5  , 3.25  , 3  , 2.725  , 2.65  , 2.5  , 2.5  , 2.25  , 2.25  , 2  , 1.85  , 1.85  , 1.75  , 1.6  , 1.55  , 1.4  , 1.25  , 1.09  , 1.09  , 1.09  , 1.09  , 47  , 27  , 25  , 23  , 15  , 13.5  , 9  , 7.5  , 7.25  , 5  , 4  , 3.5  , 3.25  , 2.75  , 2.5  , 2.2  , 2  , 1.8  , 1.5  , 1.435  ] );
data.histograms1.subset = new List( [ 1.09, 1.135, 1.2, 1.275, 1.3, 1.35, 1.45, 1.48, 1.55, 1.8, 2.25, 2.35, 3, 3.25, 3.375, 3.5, 3.5, 3.75, 4, 4.25, 6, 6.25, 7.25, 7.25, 7.5, 23, 27, 35, 45, 47.5 ] );
data.correlation = {};
data.correlation.temp = new List( [ 64,	80,	64,	56,	90,	70,	60,	77,	58,	71 ] );
data.correlation.rain = new List( [ 88,	89,	122,	136,	86,	117,	101,	92,	116,	95, ] );

data.my = {}
data.my.hw = new List( [ 95.0,	100.0,	100.0,	91.7,	100.0, 100.0] );
data.my.allhw = function( assumedScore ) {
	var s = assumedScore;
	// is it 28 or 26???
	var result = data.my.hw.copy();
	var remainingHWs = 28 - data.my.hw.length();
	for (var i=0; i < remainingHWs; i++) {
		result.push(s);
	}
	return result;
}
//data.my.total = data.my.allhw(0);


deeptree = { one: { two: { three: { four: 'LOL!!!' } } } }
dnodes = ['one', 'two', 'three', 'four'];


rain = data.correlation.rain;
temp = data.correlation.temp;



repl.start('STAT21W > ');

